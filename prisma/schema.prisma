// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String? // 소셜 로그인인 경우 null 가능
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      UserRole @default(BUYER)

  // 관계
  orders    Order[]
  addresses Address[]
}

model Address {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  address    String // 메인주소
  extra      String? // 추가주소
  postalCode String // 우편번호
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Product {
  id          Int                    @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  // pgvector 확장을 사용한 벡터 임베딩 데이터 저장 (Prisma에서 직접 지원하지 않는 경우 Unsupported 사용)
  vector      Unsupported("vector")?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  // 관계
  orderItems OrderItem[]
  images     Image[]
}

model Image {
  id        Int      @id @default(autoincrement())
  original  String
  thumbnail String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  totalAmount Float
  status      OrderStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // 관계
  items   OrderItem[]
  payment Payment? // 1:1 관계, 결제 정보는 주문이 생성된 후 연결
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float // 주문 시점의 상품 가격 (변동 가격 고려)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            Int           @id @default(autoincrement())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int           @unique
  paymentMethod String
  amount        Float
  status        PaymentStatus
  transactionId String // 외부 결제사 거래 ID
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
}

enum PaymentStatus {
  WAITING
  PAID
  FAILED
}

enum UserRole {
  BUYER
  ADMIN
}
